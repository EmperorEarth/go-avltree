package avltree

// Balance factor
const (
	leftHigh = iota
	equal
	rightHigh
)

// treeNode is a node in the tree
type treeNode(type T) struct {
	// left and right nodes
	left, right *treeNode(T)

	// The contents of this node
	value T

	// The balance factor of this node
	bal byte

	// The number of nodes in the subtree
	size int
}

// Init initializes a node with the given value
func (n *treeNode(T)) init(val T) *treeNode(T) {
	n.left = nil
	n.right = nil
	n.bal = equal
	n.size = 1
	n.value = val
	return n
}

// newNode returns an initialized treeNode
func newNode(type T)(val T) *treeNode(T) { return new(treeNode(T)).init(val) }

// leftSize returns the size of the left subtree
// of the node
func (n *treeNode(T)) leftSize() int {
	if n.left != nil {
		return n.left.size
	}
	return 0
}

// rightSize returns the size of the right subtree
// of the node
func (n treeNode(T)) rightSize() int {
	if n.right != nil {
		return n.right.size
	}
	return 0
}
